#include <opencv2/opencv.hpp>
using namespace cv;

int main() {
	// 1.以灰度模式读取原始图像并显示
	auto src_image = imread("..\\_images\\1.jpg", 0);
	if (!src_image.data) { printf("读取图片错误，请确定目录下是否有imread函数指定图片存在~！ \n"); return false; }
	imshow("原始图像", src_image);

	// 2.将输入图像延扩到最佳的尺寸，边界用0补充
	auto m = getOptimalDFTSize(src_image.rows);
	auto n = getOptimalDFTSize(src_image.cols);

	// 将添加的像素初始化为0
	Mat padded;
	copyMakeBorder(src_image, 
		padded, 
		0, 
		m - src_image.rows, 
		0, 
		n - src_image.cols, 
		BORDER_CONSTANT, 
		Scalar::all(0));
	// 3.为傅里叶变换的结果（实部和虚部）分配存储空间。
	// 将planes数组组合合并成一个多通道的数组complexI
	Mat planes[] = { Mat_<float>(padded),Mat::zeros(padded.size(),CV_32F) };
	Mat complexI;
	merge(planes, 2, complexI);
	// 4.进行就地离散傅里叶变换
	dft(complexI, complexI);
	// 5.将复数转换为幅值，即=> log(1 + sqrt(Re(DFT(I))^2 + Im(DFT(I))^2))
	split(complexI, planes);	// 将多通道数组complexI分离成几个单通道数组，planes[0] = Re(DFT(I), planes[1] = Im(DFT(I))
	magnitude(planes[0], planes[1], planes[0]);
	auto magnitude_image = planes[0];
	// 6.进行对数尺度（logarithmic scale）缩放
	magnitude_image += Scalar::all(1);
	log(magnitude_image, magnitude_image);
	// 7.剪切和重分布幅度图像限
	// 若有奇数行或奇数列，进行频谱裁剪
	magnitude_image = magnitude_image(Rect(0, 0, magnitude_image.cols & -2, magnitude_image.rows & -2));
	// 重新排列傅里叶图像中的象限，是的原点位于图像中心
	auto cx = magnitude_image.cols / 2;
	auto cy = magnitude_image.rows / 2;
	Mat q0(magnitude_image, Rect(0, 0, cx, cy));		// ROI区域的左上
	Mat q1(magnitude_image, Rect(cx, 0, cx, cy));		// ROI区域的右上
	Mat q2(magnitude_image, Rect(0, cy, cx, cy));		// ROI区域的左下
	Mat q3(magnitude_image, Rect(cx, cy, cx, cy));	// ROI区域的右下
	// 交换象限（左上和右下进行交换）
	Mat tmp;
	q0.copyTo(tmp);
	q3.copyTo(q0);
	tmp.copyTo(q3);
	// 交换象限（右上和左下进行交换）
	q1.copyTo(tmp);
	q2.copyTo(q1);
	tmp.copyTo(q2);
	// 8.归一化，用0到1之间的浮点数值将矩阵变换为可视的图像格式
	// OpenCV2 version:
	// normalize(magnitude_image, magnitude_image, 0, 1, CV_MINMAX);
	// OpenCV3 version:
	normalize(magnitude_image, magnitude_image, 0, 1, NORM_MINMAX);

	// 9.显示效果图
	imshow("频谱幅值", magnitude_image);
	waitKey();

	waitKey(6000);
}